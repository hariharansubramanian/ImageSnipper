using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using Microsoft.Extensions.Configuration;
using Microsoft.AspNetCore.Hosting;

namespace ImageSnipper_Backend.Utils
{
    /// <summary>
    /// Script Service is responsible for constructing paths from appsettings.json and executing python scripts.
    /// </summary>
    public static class ScriptRunner
    {
        /// <summary>
        /// Constructs script command and parameters from config, then calls 'RunScript()' for script execution
        /// </summary>
        public static void ExecutePythonScript(IHostingEnvironment environment, IConfiguration configuration, string image)
        {
            var projectRoot = new DirectoryInfo(environment.ContentRootPath).Parent?.Parent?.FullName;
            if (projectRoot == null) throw new InvalidOperationException("Project Root directory could not be resolved. ");

            var sourceDir = Path.Combine(environment.WebRootPath, configuration.GetValue<string>("ImagesPath:Uploaded"));
            var destinationDir = Path.Combine(environment.WebRootPath, configuration.GetValue<string>("ImagesPath:Processed"));

            if (!Directory.Exists(destinationDir)) Directory.CreateDirectory(destinationDir);

            var srcImage = Path.Combine(sourceDir, image);
            var destImage = Path.Combine(destinationDir, image);

            var script = Path.Combine(projectRoot, configuration.GetValue<string>("PythonScript:Path"), configuration.GetValue<string>("PythonScript:Name"));
            var args = new[] { srcImage, destImage };

            RunScript(script, args);
        }

        /// <summary>
        /// Starts a new process to run a python script
        /// Utilizes the execution command and arguments passed into this method as parameters
        /// Incase of error in starting process - throws Exception
        /// Incase of any error during script execution (by capturing StdErr output) - throws Exception
        /// </summary>
        private static void RunScript(string cmd, IReadOnlyList<string> args)
        {
            try
            {
                var start = new ProcessStartInfo
                {
                    FileName = "python",
                    Arguments = string.Format("\"{0}\" \"{1}\" \"{2}\"", cmd, args[0], args[1]),
                    UseShellExecute = false,   // Do not use OS shell
                    CreateNoWindow = true,   // We don't need new window
                    RedirectStandardOutput = true, // Any output, generated by application will be redirected back
                    RedirectStandardError = true  // Any error in standard output will be redirected back (for example exceptions)
                };

                using (var process = Process.Start(start))
                {
                    if (process == null) throw new InvalidProgramException("Could not start Python Process.");
                    var stderr = process.StandardError.ReadToEnd(); // StdErr result from script
                    if (stderr.Length != 0) throw new InvalidProgramException(stderr); // throw if error in running script
                }
            }
            catch (Exception e)
            {
                throw new InvalidProgramException(e.Message);
            }
        }
    }
}